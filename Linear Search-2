https://www.hackerearth.com/practice/algorithms/searching/linear-search/practice-problems/algorithm/maximum-sum-4-f8d12458/



Problem

You are given an array of integers

, you need to find the maximum sum that can be obtained by picking some non-empty subset of the array.
If there are many such non-empty subsets, choose the one with the maximum number of elements.
Print the maximum sum and the number of elements in the chosen subset.

Input:

The first line contains an integer
, denoting the number of elements of the array. Next line contains

space-separated integers, denoting the elements of the array.

Output:

Print

space-separated integers, the maximum sum that can be obtained by choosing some subset and the 
maximum number of elements among all such subsets which have the same maximum sum.

Constraints:

Sample Input

5
1 2 -4 -2 3

Sample Output

6 3

Time Limit: 1
Memory Limit: 256
Source Limit:
Explanation

The chosen subset is {1, 2, 3}.



CODE--


#include<bits/stdc++.h>
using namespace std;
int main()
{
	int N;
	cin>>N;
	int a[N];
	for(int i=0;i<N;i++){
		cin>>a[i];
	}
	sort(a,a+N);
	
	vector<int>v;
	int count=0;
	for(int i=0;i<N;i++){
		if(a[i]>0){
			v.push_back(a[i]);
			count++;
		}
	}
	long long int sum=0;
	for(int i=0;i<v.size();i++){
		sum+=v[i];
	}
	if(v.size()==1){
		cout<<v[0]<<" "<<1<<endl;
	}
	// else cout<<sum<<" "<<v.size()<<endl;;
	else cout<<sum<<" "<<count<<endl;
}
